[
  {
    "name": "DatabaseManager#updateDefaultStatus",
    "filePath": "classes/DatabaseManager.js",
    "lines": [
      {
        "lineNumber": 176,
        "line": "  /**\r"
      },
      {
        "lineNumber": 177,
        "line": "   * Update the default status of the bot.\r"
      },
      {
        "lineNumber": 178,
        "line": "   * @param  {Object}             status      The status to make default.\r"
      },
      {
        "lineNumber": 179,
        "line": "   * @param  {String}             status.name The name of the status.\r"
      },
      {
        "lineNumber": 180,
        "line": "   * @param  {Number}             status.type The type of the status.\r"
      },
      {
        "lineNumber": 181,
        "line": "   * @return {(Number|undefined)}             Returns 0 on success or undefined.\r"
      },
      {
        "lineNumber": 182,
        "line": "   */\r"
      },
      {
        "lineNumber": 183,
        "line": "  updateDefaultStatus (data) {\r"
      }
    ],
    "codeParams": [
      "data"
    ],
    "docParams": [
      "status"
    ]
  },
  {
    "name": "DatabaseManager#_get",
    "filePath": "classes/DatabaseManager.js",
    "lines": [
      {
        "lineNumber": 244,
        "line": "  /**\r"
      },
      {
        "lineNumber": 245,
        "line": "   * Get the first entry from a table matching a condition.\r"
      },
      {
        "lineNumber": 246,
        "line": "   * @private\r"
      },
      {
        "lineNumber": 247,
        "line": "   * @param  {String} table The name of the table to get from.\r"
      },
      {
        "lineNumber": 248,
        "line": "   * @param  {Object} where The column names and values to match.\r"
      },
      {
        "lineNumber": 249,
        "line": "   * @return {Object}       The first matching row.\r"
      },
      {
        "lineNumber": 250,
        "line": "   */\r"
      },
      {
        "lineNumber": 251,
        "line": "  async _get ({ table, columns = '*', where = true }) {\r"
      }
    ],
    "codeParams": [
      "*"
    ],
    "docParams": [
      "table",
      "where"
    ]
  },
  {
    "name": "Logger#log",
    "filePath": "classes/Logger.js",
    "lines": [
      {
        "lineNumber": 7,
        "line": "  /**\r"
      },
      {
        "lineNumber": 8,
        "line": "   * Log something.\r"
      },
      {
        "lineNumber": 9,
        "line": "   * @param {String} str             The string to log (can also be something with a toString method).\r"
      },
      {
        "lineNumber": 10,
        "line": "   * @param {String} [color='white'] The color that the message should be in.\r"
      },
      {
        "lineNumber": 11,
        "line": "   */\r"
      },
      {
        "lineNumber": 12,
        "line": "  log (content, color = 'white') {\r"
      }
    ],
    "codeParams": [
      "content",
      "color"
    ],
    "docParams": [
      "str",
      "color"
    ]
  },
  {
    "name": "Logger#success",
    "filePath": "classes/Logger.js",
    "lines": [
      {
        "lineNumber": 16,
        "line": "  /**\r"
      },
      {
        "lineNumber": 17,
        "line": "   * Log something in green for success.\r"
      },
      {
        "lineNumber": 18,
        "line": "   * @param {String} str The string to log (can also be something with a toString method).\r"
      },
      {
        "lineNumber": 19,
        "line": "   */\r"
      },
      {
        "lineNumber": 20,
        "line": "  success (content) {\r"
      }
    ],
    "codeParams": [
      "content"
    ],
    "docParams": [
      "str"
    ]
  },
  {
    "name": "Logger#warn",
    "filePath": "classes/Logger.js",
    "lines": [
      {
        "lineNumber": 24,
        "line": "  /**\r"
      },
      {
        "lineNumber": 25,
        "line": "   * Log something in yellow for warning.\r"
      },
      {
        "lineNumber": 26,
        "line": "   * @param {String} str The string to log (can also be something with a toString method).\r"
      },
      {
        "lineNumber": 27,
        "line": "   */\r"
      },
      {
        "lineNumber": 28,
        "line": "  warn (content) {\r"
      }
    ],
    "codeParams": [
      "content"
    ],
    "docParams": [
      "str"
    ]
  },
  {
    "name": "Logger#error",
    "filePath": "classes/Logger.js",
    "lines": [
      {
        "lineNumber": 32,
        "line": "  /**\r"
      },
      {
        "lineNumber": 33,
        "line": "   * Log something in red for error.\r"
      },
      {
        "lineNumber": 34,
        "line": "   * @param {String} err The string to log (can also be something with a toString method).\r"
      },
      {
        "lineNumber": 35,
        "line": "   */\r"
      },
      {
        "lineNumber": 36,
        "line": "  error (error) {\r"
      }
    ],
    "codeParams": [
      "error"
    ],
    "docParams": [
      "err"
    ]
  }
]